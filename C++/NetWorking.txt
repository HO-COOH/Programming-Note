 /*网络编程*/    
 初始化socket库：
 typedef struct WSAData
    {
        WORD wVersion;
        WORD wHighVersion;
        char szDescription[WSADESCRIPTION_LEN+1];
        char szSystemStatus[WSASYS_STATUS_LEN+1];
        unsigned short iMaxSockets;
        unsigned short iMaxUdpDg;
        char FAR * lpVendorInfo;
    } WSADATA, FAR * LPWSADATA;
    用MAKEWORD(a,b)函数返回一个WORD表示当前套接字库的版本号，比如2.0，则a为2，b为0
    然后用WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData)函数初始化sock库，第一个参数为MAKEWORD的返回值，第二个参数是WSAData类型的变量的指针
    
    
    struct sockaddr_in
    {
        short sin_family;   //指定地址家族（地址格式），必须设置为AF_INET，表示程序所使用的地址家族是TCP/input
        unsigned short sin_port;    //端口号码，通常用htons(int port)函数的返回值，htons函数的参数就是端口号
        struct in_addr sin_addr;    //IP地址，通常用inet_addr(const char *s)函数的返回值，inet_addr函数的参数是ip地址的字符串，INADDR_ANY表示接受任何地址
        char sin_zero[8];   //需指定为0
    };

    struct in_addr
    {
        union S_un
        {
            struct S_un_b;
            {
                unsigned char s_b1, s_b2, s_b3, s_b4;
            };
            struct S_un_w
            {
                unsigned short s_w1, s_w2；
            };
            unsigned long S_addr;   //通常用inet_addr(const char *s)函数将字符串s转化为S_addr的值
        };
    };
    


TCP连接：
    创建套接字句柄：
    SOCKET socket(int af,   //指定套接字所使用的地址格式，通常为AF_INET
    int type,   //套接字类型，SOCK_STREAM流式套接字用于tcp，SOCK_DGRAM数据报套接字用于udp，SOCK_RAW原始套接字
    int protocol)   //函数返回创建成功的套接字句柄
    对服务器而言，套接字创建成功后还要用bind()函数将套接字与地址结构信息相关联，然后用listen()函数监听
    int bind(SOCKET s,//套接字句柄
    const struct sockaddr FAR* name,    //地址结构信息
    int namelen)                        //地址结构信息的结构体大小，通常用sizeof()，参数就是sockaddr_in变量
    
    int listen(SOCKET s,    //套接字句柄
    int backlog)            //指定监听的最大连接数量
    客户端：连接服务器
    int connect(SOCKET s,               //套接字句柄
     const struct sockaddr FAR * name,  //将要连接的服务器地址信息结构指针，通常用类型转换将sockaddr_in指针转换为sockaddr指针
      int namelen)                      //地址信息结构体长度，通常用sizeof()，参数就是sockaddr_in变量
    服务器：接受客户端的连接请求
    SOCKET accept(SOCKET s,     //套接字句柄
    struct sockaddr FAR * addr, //获取连接对方的地址信息（参数是新变量，函数将信息存进去）
    int FAR* addrlen            //地址长度
    )   函数返回一个新的套接字句柄用于服务器与客户端的数据传输
    发送和接收数据的函数
    int send(SOCKET s, const char FAR * buffer, int len, int flags) //用accept()返回的的套接字句柄发送buffer所指的数据，长度为len，flags通常设置为0
    int recv(SOCKET s, char FAR * buffer, int len, int flags)       //用connect()过的套接字句柄接受长度为len的数据，存储到buffer指向的缓冲区，flags设置为0
    关闭套接字：int closesocket(SOCKET s)   //关闭套接字句柄

    所以服务器要两个套接字，一个用来connect()和监听listen()，另一个（accept函数返回的新套接字句柄）用来accept()和发送数据
    客户端要一个套接字，用来connect()和接收
UDP连接：
    创建套接字句柄
    然后直接调用函数进行数据收发：
    int sendto(
        SOCKET S,   //创建成功的套接字句柄
        const char FAR * buffer,    //数据缓冲区
        int len,    //数据长度
        int flags,  //通常设置为0
        const struct sockaddr FAR* to,  //目标地址结构信息，一般将sockaddr_in指针转换为sockaddr类型
        int tolen   //目标地址结构大小，通常用sizeof()，参数就是sockaddr_in变量
    )
    int recvfrom(
        SOCKET s,
        char FAR  buffer,
        int len,
        int flags,
        struct sockaddr FAR * from,
        int FAR* fromlen
    )
    
创建线程：
    HANDLE CreateThread(
        LPSECURITY_ATTRIBUTES lpThreadAttributes,   //是一个指向结构体SECURITY_ATTRIBUTES的指针，表示新建线程的安全属性，设置为NULL表示使用默认的安全属性
        DWORD dwStackSize,                          //指定线程初始化时地址空间的大小，0表示新建线程的地址空间大小与调用该函数的线程地址空间大小一样
        LPTHREAD_START_ROUTINE lpStartAddress,      //指定该线程的线程函数的地址（不加括号的函数名），该线程创建成功后，线程将调用该线程函数执行
        LPVOID lpParameter,                         //指定要传递给新建线程的命令行参数。新建线程可以根据该命令行参数执行不同功能
        DWORD dwCreationFlags,                  //用于指定新线程创建后是否立即运行，取值：CREATE_SUSPENDED->线程创建成功后暂停运行，0->立即运行
        LPDWORD lpThreadID                          //新建线程的ID号，可以设置为NULL
    )
    关闭线程：
        CloseHandle(HANDLE h)
    初始化临界区：
        CRITICAL_SECTION类型变量定义时系统自动初始化，直接取地址作为下面函数的参数
        void InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)    //参数是一个指向相应类型结构体的指针
        初始化后程序便可以进入该临界区，其他程序只能等待临界区的程序释放临界区所有权后才能进入
        使调用这个函数的线程进入临界区：void EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
        使调用这个函数的线程释放并临界区：void LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
        主线程删除临界区：void DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
