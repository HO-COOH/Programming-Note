1.服务
    1.1服务类型（EnumServicesStatus()函数的第二个参数）宏
        驱动程序服务：#define SERVICE_DRIVER (SERVICE_KERNEL_DRIVER | SERVICE_FILE_SYSTEM_DRIVER | SERVICE_RECOGNIZER_DRIVER)
                                                设备驱动程序、内核模式文件系统、文件系统识别器驱动程序
        win32应用程序服务：#define SERVICE_WIN32 (SERVICE_WIN32_OWN_PROCESS | SERVICE_WIN32_SHARE_PROCESS)
                                                    独占一个进程的服务、与其他服务共享一个进程的服务
        全部类型服务：#define SERVICE_TYPE_ALL (SERVICE_WIN32 | SERVICE_ADAPTER | SERVICE_DRIVER | SERVICE_INTERACTIVE_PROCESS)
    1.2打开服务管理器
        SC_HANDLE OpenSCManager(
            LPCTSTR lpMachineName,  //指向欲打开服务控制管理器数据库的目标主机名，本机设置为NULL
            LPCTSTR lpDatabaseName, //指向目标主机SCM数据库名字的字符串，本机设置为NULL
            DWORD dwDesiredAccess   //指定对SCM数据库的访问权限，一般为SC_MANAGER_ALL_ACCESS
        )   若调用成功，返回一个SCM句柄，否则返回NULL
    1.3服务枚举函数
        struct EnumServicesStatus
        {
            LPTSTR lpServiceName;
            LPTSTR lpDisplayName;
            SERVICE_STATUS ServiceStatus;
        }
        struct SERVICE_STATUS
        {
            DWORD dwServiceType;
            DWORD dwCurrentState;   //取值有SERVICE_PAUSED, SERVICE_STOPPED, SERVICE_RUNNING
            DWORD dwControlsAccepted;
            DWORD dwWin32ExitCode;
            DWORD dwServiceSpecificExitCode;
            DWORD dwCheckPoint;
            DWORD dwWaitHint;
        }
        BOOL EnumServicesStatus(
            SC_HANDLE hSCManager,   //OpenSCManager返回的SCM句柄
            DWORD dwServiceType,    //所要枚举的服务类型（1.1中的宏）
            DWORD dwServiceState,   //枚举指定状态的服务，SERVICE_STATE_ALL为任何状态的服务
            LPENUM_SERVICE_STATUS lpServices,    //指向用来存储服务状态的指针
            DWORD cbBufSize,        //上面那个指针所指的缓冲区的大小
            LPDWORD pcbBytesNeeded, //那个指针实际被使用的大小的指针，值由这个函数设定
            LPDWORD lpServicesReturned, //函数返回枚举服务的个数
            LPDWORD lpResumeHandle  //函数返回枚举是否成功，通常设置为NULL
        )
        应该先调用一次这个函数，其中参数4和5设置为NULL，获取第6个参数的值，然后用new分配内存，并强制类型转换为LPENUM_SERVICE_STATUS类型的指针
    1.5打开指定的服务
        SC_HANDLE OpenService(
            SC_HANDLE hSCManager,   //由OpenSCManager()函数返回的句柄
            LPCTSTR lpServiceName,  //指定要打开的服务的名称
            DWORD dwDesiredAccess   //打开服务的访问权限，一般为SC_MANAGER_ALL_ACCESS
        )函数返回打开的服务的句柄
    1.6启动和停止服务
        BOOL StartService(
            SC_HANDLE hService, //由OpenService()函数返回的句柄
            DWORD dwNumServiceArgs, //启动服务所需的参数个数，如果没有参数则设置为0
            LPCTSTR *lpServiceArgVectors    //指向启动服务的参数，如果没有参数则设置为NULL
        )
        BOOL ControlService(
            SC_HANDLE hService, //由OpenService()函数返回的句柄
            DWORD dwControl,    //操作该服务的控制码，要停止服务则为SERVICE_CONTROL_STOP
            LPSERVICE_STATUS lpServiceStatus    //函数返回该服务的状态
        )
    1.4关闭服务句柄
        BOOL CloseServiceHandle(SC_HANDLE hSCObject)    //关闭由OpenSCManager()或OpenService()函数返回的句柄
        注意这两个函数返回的句柄都应该在程序退出前关闭
2.进程
    2.1获取进程ID
        DWORD GetWindowThreadProcessID(
            HWND hWnd,  //窗口句柄，可以由FindWindow()获取
            LPDWORD lpdwProcessId   //函数返回窗口句柄对应的进程ID
        )
    2.2打开进程
        HANDLE OpenProcess(
            DWORD dwDesiredAccess,   //打开进程要获得的访问权限，通常为PROCESS_ALL_ACCESS
            BOOL bInheritHandle,    //获取的句柄是否可以继承，一般为不继承，设置为FALSE
            DWORD dwProcessId       //由GetWindowThreadProcessID()的第二个参数获得的值
        )函数返回进程的句柄
    2.3结束进程
        BOOL TerminateProcess(
            HANDLE hProcess,    //要结束的进程的句柄，由OpenProcess()返回值得到
            UINT uExitCode      //进程的退出码，通常设置为0
        )
3.多线程
    3.1创建线程
        HANDLE CreateThread(
            LPSECURITY_ATTRIBUTES lpThreadAttributes,   //指向一个结构体的指针，表示创建线程的安全属性，NULL表示默认安全属性
            DWORD dwStackSize,                          //指定线程的堆栈大小，NULL表示与主线程相同
            LPTHREAD_START_ROUTINE lpStartAddress,      //指定线程函数，线程函数的定义：DWORD WINAPI ThreadProc(LPVOID lpParameter) //参数是线程数据
            LPVOID lpParameter,                         //传递给线程函数的一个参数，可以将多个参数通过结构体一次性传递到线程函数
            DWORD dwCreationFlags,                      //指定创建线程后的线程状态，0表示立刻执行，CREATE_SUSPENDED表示暂停执行，需要用ResumeThread()让线程运行
            LPDWORD lpThreadId                          //函数返回新创建线程的线程id
        )创建成功将返回线程的句柄，否则返回NULL
    3.2等待子线程执行
        DWORD WaitForSingleObject(
            HANDLE hHandle,         //要等待的对象的句柄（对于多线程，应该为CreateThread()函数返回的句柄）
            DWORD dwMilliseconds    //超时时间，0表示立刻返回，INFINITE表示一直等待直到线程返回
        )函数失败返回WAIT_FAILED，超时返回WAIT_TIMEOUT
        DWORD WaitForMultipleObjects(
            DWORD nCount,               //指定要让函数等待的线程的数量，范围是1-MAXIMUM_WAIT_OBJECTS
            CONST HANDLE *lpHandles,    //指向等待线程句柄数组的指针
            BOOL fWaitAll,              //指定是否等待全部线程返回，TRUE表示等待全部
            DWORD dwMilliseconds        //与上面函数的最后一个参数相同
        )
    3.3枚举进程、线程、DLL
        #include <Tlhelp32.h>
        HANDLE WINAPI CreateToolhelp32Snapshot(
            DWORD dwFlags,          //指定要建立系统快照的类型，TH32CS_SNAPMODULE枚举DLL，TH32CS_SNAPPROCESS枚举进程，TH32CS_SNAPTHREAD枚举线程
            DWORD th32ProcessID     //如果枚举进程或线程，设置为NULL，枚举DLL设置为进程ID
        )函数返回一个快照句柄，提供给枚举函数，失败返回INVALID_HANDLE_VALUE

4.注册表
    4.1打开注册表
        LONG RegOpenKeyEx(
            HKEY hKey,          //指定父键句柄，可以是预定义句柄，如：HKEY_LOCAL_MACHINE
            LPCTSTR lpSubKey,   //指向一个字符串（宽字符，双引号前以L开头语）指针，可以为NULL，打开hKey所指向的句柄
            DWORD ulOptions,    //系统保留，需设置为0
            REGSAM samDesired,  //指定打开注册表的存储权限，通常为KEY_ALL_ACCESS
            PHKEY phkResult     //函数返回打开的子健句柄
        )打开成功，则函数返回ERROR_SUCCESS
    4.2创建子键
        LONG RegCreateKeyEx(
            HKEY hKey,          //指定父键句柄
            LPCTSTR lpSubKey,   //要创建的子键名称
            DWORD Reserved,     //系统保留，需设置为0
            LPTSTR lpClass,     //子键类名，通常为NULL
            DWORD dwOptions,    //创建子键的选项，通常设置为REG_OPTION_NON_VOLATILE，表示创建的子键被创建到注册表文件中，而不是内存中
            REGSAM samDesired,  //指定打开注册表的存储权限，通常为KEY_ALL_ACCESS
            LPSECURITY_ATTRIBUTES lpSecurityAttributes, //指定子键的安全属性，设置为NULL表示使用默认安全性
            PHKEY phkResult,    //函数返回创建的子键句柄
            LPDWORD lpdwDisposition //设置为NULL
        )函数执行成功返回ERROR_SUCCESS，当子键已经存在时，作用与RegOpenKeyEx()相同，打开lpSubKey子键
    4.3删除子键
        这个函数只能删除最下一层子键，即没有任何子键的键（也叫键值项）
        LONG RegDeleteKey(
            HKEY hKey,          //所要删除的子键的父键的句柄
            LPCTSTR lpSubKey    //所要删除的子键的名称的字符串
        )
    4.4键值的查询
        LONG RegQueryValueEx(
            HKEY hKey,              //要读取的键值项所处的子键
            LPCTSTR lpValueName,    //所要读取的键值项的名称
            LPDWORD lpReserved,     //保留参数，设置为NULL
            LPDWORD lpType,         //函数返回键值的类型，如果不需要，可以设置为NULL
            LPBYTE  lpData,         //指向一个缓冲区，函数返回键值数据
            LPDWORD lpcbData        //指定缓冲区长度，调用后函数返回缓冲区实际接收的长度
        )
    4.5写入键值项
        LONG RegSetValueEx(
            HKEY hKey,              //要写入的键值所处的子键
            LPCTSTR lpValueName,    //键值项名称的字符串
            DWORD Reserved,         //保留参数，设置为0
            DWORD dwType,           //要写入的键值的键值数据的类型
            CONST BYTE *lpData,     //键值数据的缓冲区
            DWORD cbData            //键值数据缓冲区的长度
        )
    4.6删除键值项
        LONG RegDeleteValue(
            HKEY hKey,              //要删除的键值所处的子键
            LPCTSTR lpValueName     //被删除键值项的名称
        )
    4.7枚举子键
        LONG RegEnumKeyEx(
            HKEY hKey,                  //要枚举的子键句柄
            DWORD dwIndex,              //枚举的索引号，从0开始
            LPTSTR lpName,              //子键名称的字符串缓存，函数返回（注意用cout输出时应使用wcout）
            LPDWORD lpcName,            //调用函数前设置为lpName的缓冲区大小，调用函数后函数返回实际使用的大小
            LPDWORD lpReserved,         //保留参数，设置为NULL
            LPTSTR lpClass,             //子键的类型，设置为NULL
            LPDWORD lpcClass,           //设置为NULL
            PFILETIME lpftLastWriteTime //指向一个FILETIME结构体，函数返回最后一次被写入的时间
        )函数的功能是枚举一个子键（dwIndex指定）的名称和键值
        LONG RegEnumValue(
            HKEY hKey,              //要枚举的子键句柄
            DWORD lpValueName,      //枚举的索引号，从0开始
            LPTSTR lpValueName,     //键值名称的字符串缓存，函数返回
            LPDWORD lpcValueName,   //调用函数前设置为lpValueName的缓冲区大小，调用函数后函数返回实际使用的大小
            LPDWORD lpReserved,     //保留参数，设置为NULL
            LPDWORD lpType,         //键值数据类型，函数返回
            LPBYTE lpData,          //键值数据的缓冲区
            LPDWORD lpcbData        //调用函数前设置为lpData的缓冲区大小，调用函数后函数返回实际使用的大小
        )
    4.8关闭注册表
        LONG RegCloseKey(HKEY hKey)
    4.9内核下的注册表操作
    