零、包
    1.包的声明
        一个源代码文件可以在第一行用package关键字+包名来声明这个文件属于一个包
            package example
        这使得本源文件内所有的内容将归属于这个包
        本源文件内的所有内容的全名是包名+点运算符.+标识符名
        如果没有声明包，本文件内的所有内容将归属于一个默认的无名的包
    2.导入
        使用import关键字+点运算符.+包名+点.+标识符（导入一个特定标识符）/*（导入包中的全部内容）
        如果有多个包中包含同名标识符，在导入时用附加的as关键字来区别
            import org.test.Message as testMessage 
    3.默认导入
        以下的包是每一个kotlin源文件默认导入
            kotlin.*
            kotlin.annotation.*
            kotlin.collections.*
            kotlin.comparison.*
            kotlin.io.*
            kotlin.ranges.*
            kotlin.sequences.*
            kotlin.text.*
        附加包根据目标平台导入：
            jvm:
                java.lang.*
                kotlin.jvm.*
            javascript:
                kotlin.js.*
    4.可见性
        在一个源文件内，一个标识符如果用：
            private修饰，这个标识符只在本文件内可见
            internal修饰，这个标识符在同模块内可见
        如果没有任何修饰，默认public，在全局可见

一、基本类型
    val：值从不更改
    var：值可以更改
    Byte    8位
    Int     32位
    Short   16位
    Long    64位
    Float   32位    小数位24位  指数位8位   十进制精度6-7位
    Double  64位    小数位53位  指数位11位  十进制精度15-16位
    Char
    Boolean true/false
    String
    整数字面值：Kotlin默认推断为Int
        十进制后加L指定为Long
        十六进制字面值以0x开头
        二进制字面值以0b开头
        不支持八进制字面值
        对于很大的数，可以用下划线_作为整数字面值分隔符
        val oneMillion=1_000_000
        val hexNum=0xFF_3C_AE 

    小数字面值Kotlin默认推断为Double类型，如需指定为Float，需要在字面值后加f或F后缀

    Kotlin不允许赋值类型转换
        val b:Byte=1
        val i:Int=b //ERROR
    但可以使用数字类型的方法来进行转换，所有数字类型都支持如下方法：
        toByte()
        toShort()
        toInt()
        toLong()
        toFloat()
        toDouble()
        toChar()
    
    字符字面值以一对单引号''括起来，字符型不可以直接与整数比较，Unicode字符用'\u十六进制值'表示

    字符串重载了方括号[]运算符来获取其中的字符，字符串字面值以一对双引号""括起来，原始字符串字面值以一对三引号""" """括起来
    字符串可以通过$运算符将变量的值替代到字符串中
        var i=10
        var str="i is $i"   //str="i is 10"
    也可以通过${}将表达式的值替代到字符串中
        var s="abc"
        var str="The length of s is ${s.length()}"  //str="The length of s is 3"
    is运算符
        is运算符用来在运行时检查一个对象是否具有某个类型并返回一个布尔值，语法：obj is Type
            if(obj is String)
                print(obj.length)
        !is运算符则检查一个对象是否不具有某个类型
        is运算符还适用于继承多态，用is检查派生类对象是否为基类时将返回true
            open class A {}
            class B : A() {}
            val b = B()
            if(b is A)
                print("b is A")
        由于kotlin中的泛型在运行时并不存在，例如List<Int>在运行时被类型消除为List<*>，所以不可以直接使用is来判断容器的类型
            if(ints is List<Int>) //错误
            if(ints is List<*>) //OK
    可空类型
        可空类型在类型后加问号?，表明可以为null
        可以使用传统语法来检测一个可空类型对象是否为null
            val l = if(b != null) b.length else -1
        也可以使用?:运算符来简化，?:运算符在左操作数非空时返回左操作数，否则返回右操作数
            val l = b.length ?: -1
        也可以使用?.运算符，当操作数为空时返回null，否则与普通非空运算符相同
            val l = b?.length // l: Int?
        ?.运算符可以连接使用，形成调用链
            bob?.department?.head?.name
        !!操作符将可空类型强制类型转换为对应的非可空类型，如果此时值为null则抛出异常
            val l = b!!.length

    智能类型转换
        多数情况下不需要做显式类型转换
        编译器会自动根据is运算符在作用域内将操作数转换成相应类型
            fun demo(x: Any) {
                if (x is String) {
                    print(x.length) // x is automatically cast to String
                }

                if (x is String && x.length > 0) {
                    print(x.length) // x is automatically cast to String
                }

                when (x) {
                    is Int -> print(x + 1)
                    is String -> print(x.length + 1)
                    is IntArray -> print(x.sum())
                }
            }
    强制（不安全）的类型转换
        使用as关键字
            var x = y as Type //将对象y强制转换为Type类型
        当被转换的对象为null时，这个转换将抛出异常，所以对于可空类型，应当强制转换成相应的可空类型
            var x = y as Type?
    强制安全的类型转换
        为了避免抛出异常，可以使用as?关键字
        当不可转换时，对象被赋值为null
            var x = y as? Type
    枚举类型
        类型安全的枚举类型 enum class
            enum class的枚举值使用逗号,分隔
            枚举值是该枚举类型的一个对象，所以可以使用类似于构造函数的语法来定义枚举值的内部类型
            枚举类型可以有成员函数，需要在枚举值后加分号;与成员函数隔开
                enum class Color(val rgb: Int) {
                    RED(0xFF0000),
                    GREEN(0x00FF00),
                    BLUE(0x0000FF)

                    fun containsRed() =  (this.rgb and 0xFF00000 != 0)
                }
                val red = Color.RED
                val redValue = Color.RED.rgb //red = 0xFF0000
            相关函数：
                .valueOf(value: String) : EnumClass         //返回以字符串value为枚举名的枚举值，若不存在抛出IllegalArgumentException异常
                .values() : Array<EnumClass>                //返回包含EnumClass枚举类型的所有枚举值的数组
                enumValues<EnumClass>() : Array<EnumClass>  //返回包含EnumClass枚举类型的所有枚举值的数组
                enumValueOf<EnumClass>(value: String) : EnumClass //返回以字符串value为枚举名的枚举值，若不存在抛出IllegalArgumentException异常        
    类型别名
        用typealias <Name> = <Type>定义一个类型别名，例如
            typealias ClickHandler = (Button, ClickEvent) -> Unit

二、语句
    1.if
        kotlin中的if语句可以作为语句，也可以作为一个表达式，有返回值
            if(a<b)
                max=b
            else
                max=a
        如果将if语句作为表达式使用并赋值给一个变量，则if必须有配对的else语句，整个if else语句的值是满足的if 或 不满足的else语句块中最后一个语句的值
            val max=if(a>b)
                {
                    print("Choose a")
                    a
                }
                else
                {
                    print("Choose b")
                    b
                }
    2.when
        when语句可以作为语句，也可以作为一个表达式，有返回值
        带参数的when语句：
            when语句执行时，将参数与分支条件比较，匹配的分支将被执行，不匹配的被跳过，如果没有匹配的，执行else语句（如果存在的话）
                when(x)
                {
                    1 -> print("x==1")
                    2 -> print("x==2")
                    else -> print("x is neither 1 nor 2")
                }
            如果需要对不同的分支执行相同的操作，可以将多个分支的条件用逗号,分隔，合并成一个分支
                when(x)
                {
                    0,1 -> print("x==0 or x==1")
                    else -> print("otherwise")
                }
        不带参数的when语句：
            不带参数的when语句相当于if-else语句，
                when
                {
                    x.isOdd() -> print("x is odd")
                    x.isEven() -> print("x is even")
                    else -> print("What")
                }
        作为表达式时，必须要有else语句，整个when语句的返回值是匹配分支语句块的最后一个语句的值
    3.for循环
        for循环可用于任何定义了迭代器的数据集合，包括：
        定义了一个iterator()的方法，这个函数返回的对象需要：定义了方法next()和hasNext()
            for(item in collection)
            {
                //...
            }
    4.while循环
    5.do while循环
    6.跳转语句，也均可以作为表达式
        return
        break
        continue

二、数组 Array

三、函数
    1. 声明
        fun functionName(arg1: ArgType, arg2: ArgType):returnType
        {
        }
    2. 默认参数
        默认参数在参数的类型后使用=定义
        fun functionName(arg1: Int=2){ }    //整形参数arg1的默认值为2
    3. 命名实参调用
        如果一个函数有很多参数，在调用时可以显式打出形参名并赋值
        fun aLotOfParameters(param1: Type1, param2: Type2, param3: Type3){ }
        aLotOfParameters(param1=arg1, param2=arg2, param3=arg3)
    4. 紧凑函数
        当函数只包括一个表达式时，可以用等号=代替花括号{}写成紧凑形式
            fun isHot(temperature: Int):Boolean = temperature > 30
        紧凑函数的返回值类型可以被自动推导，所以可以进一步写成
            fun isHot(temperature: Int) = temperature > 30
            
    5. 主函数的完全版
        fun main(agrs: Array<String>){ }
    6.可变参数
        可变参数实际上是一个同类型的参数数组，在函数头中将要作为可变参数接受的形参前加vararg关键字
        由于kotlin支持命名实参调用，所以vararg不一定要成为函的最后一个参数
            fun <T> asList(vararg ts: T): List<T> {
                val result = ArrayList<T>()
                for (t in ts) // ts is an Array
                    result.add(t)
                return result
            }
    7.没有返回值的函数的返回类型是Unit
四、类
    类的声明由类的类名、类的主构造函数和类的结构组成
    一个类的结构可以为空，这样的类为空类，花括号可以省略
        class Empty
    在kotlin中，所有类都继承一个共同的基类Any
    Any类包含3个方法
        .equals(other: Any?) : Boolean
        .hashCode() : Int
        .toString() : String
    1.主要构造函数和init代码块
        一个Kotlin类包含一个主要构造函数和若干个次要构造函数组成，主要构造函数是类声明头的一部分，紧跟在类名之后
            class Person constructor(firstName: String) { }
        如果这个主要构造函数没有可见性修饰符（public private），constructor关键字可以省略
            class Person(firstName: String){ }  //firstName是主要构造函数的一个参数
        可以将需要初始化的类成员的声明直接放在主要构造函数中，使得主要构造函数可以直接对数据初始化
            class Person(val firstName: String) //firstName是Person类的一个成员，并在主要构造函数中直接被初始化
        主要构造函数只用于初始化，不能包含代码，代码要放在init语句块中，此时init语句块可以使用主要构造函数中的参数
            class Person(fullName:String)
            {
                val firstName
                val lastName
                init
                {
                    firstName = fullName.substringBefore(' ')
                    lastName = fullName.substringAfter(' ')
                }
            }
        一个类中可以有多个init代码块，按他们被声明的顺序来执行，所有init代码块都在构造时被执行一次
    2.次要构造函数
        次要构造函数调用前，一定要先执行主要构造函数和init语句块（如果有的话）
        次要构造函数通过关键字constructor定义
        当一个类定义了主要构造函数时，必须通过在constructor()之后加冒号通过this()调用主要构造函数并提供主要构造函数所需的参数完成构造
            constructor(arg: argType):this(args) { }
        所以一个类的构造函数的执行顺序是：主要构造函数->所有init代码块->次要构造函数

    3.可见性
        private：类内可见
        protected：类内和派生类内可见
        public：默认
        internal：同样被声明成internal的同模块的类内可见
    4.属性
        一个用var定于的成员属性可以自定义getter和setter，一个用val定义的成员属性只能自定义getter
        getter和setter紧跟在成员属性后定义
            val isEmpty: Boolean
                get() = this.size == 0
        可以只写出get和set关键字来使用编译器提供的默认实现
        在getter和setter中，对自身的引用使用关键字field
            var counter = 0 // the initializer assigns the backing field directly
                set(value) {
                    if (value >= 0)
                        field = value
                        // counter = value // ERROR StackOverflow: Using actual name 'counter' would make setter recursive
                }
    

    4.接口类
        接口类使用关键字interface声明，接口类可以定义具体方法或抽象方法，与抽象类不同的是，接口类不能存储非抽象的数据成员，或者需要用get()方法来赋初值
        接口类的方法如果没有定义，默认为abstract修饰的抽象方法
        一个普通类或接口类可以同时继承多个接口类
        如果一个普通类继承了包含同名方法的多个接口类，需要显式override重名的方法
            interface A
            {
                fun foo() {print("A")}
                fun bar()
            }
            interface B
            {
                fun foo() {print("B")}
                fun bar() {print("B.bar")}
            }
            class MyClass: A, B
            {
                override fun foo()
                {
                    super<A>.foo()
                    super<B>.foo()
                    //...
                }

                override fun bar()
                {
                    super<B>.bar()
                    //...
                }
            }
    5.数据类
        数据类是主要用来存储数据的类，用data class关键字声明
        编译期给数据类自动生成
            .equals(other: Any?)
            .hashCode()
            .toString()
            .componentN() //N为自然数，从1开始，以成员变量声明的顺序
            .copy() //执行深复制
        可以通过添加override对自动生成的函数重写
    6.密封类
        在class关键字前加sealed关键字成为密封类，在interface前加sealed关键字成为密封接口
            seal interface Expr
            sealed class MathExpr() : Expr
        密封类是特殊的抽象类，且只在本文件可见
        所以必须在本文件内派生使用
        使用密封类的一个好处是在when语句使用is关键字判别类型时中可以枚举出全部类型，因为编译器已知所有的派生类型
    6.拓展函数
        可以使用拓展函数来给一个类添加成员函数，从而允许使用类似于调用成员函数的语法来调用这个添加的拓展函数，而避免使用继承
        拓展函数中，使用this关键字来指代自身对象
        定义：
            fun Type.FunctionName()
        例如：
            fun<T> MutableList<T>.swap(index1: Int, index2: Int)
            {
                val temp = this[index1]
                this[index1] = this[index2]
                this[index2] = temp
            }
            val list = mutableListOf(1, 2, 3)
            list.swap(0, 2)
        注意拓展函数是编译期实现的，不适用于多态
            open class Shape
            class Rectangle: Shape()
            fun Shape.getName() = "Shape"           //Shape拓展函数
            fun Rectangle.getName() = "Rectangle"   //Rectangle拓展函数
            
            fun printName(s: Shape) = println(s.getName())

            printName(Rectangle())
    中置函数
        只接收一个参数（必须不带默认参数）的成员函数和扩展函数可以写成中置函数
        在函数定义前加关键字infix即可成为中置函数
            infix fun Int.shl(x: Int): Int {/*...*/}
            val r = 1 shl 2 //等同于val r = 1.shl(2)
        中置函数的优先级低于算术运算符，高于逻辑运算符
    运算符重载
        在需要重载的成员运算符函数前加operator关键字
        如果派生类需要重写继承的运算符函数，可以只加override关键字省略operator关键字
        +a a.unaryPlus()
        -a a.unaryMinus()
        !a a.not()

        a++ ++a a.inc()
        a-- --a a.dec()

        a+b a.plus(b)
        a-b a.minus(b)
        a*b a.times(b)
        a/b a.div(b)
        a%b a.rem(b)
        a..b a.rangeTo(b)

        a+=b a.plusAssign(b)
        a-=b a.miusAssign(b)
        a*=b a.timesAssign(b)
        a/=b a.divAssign(b)
        a%=b a.remAssign(b)

        a==b a!=b a?.equals(b) ?: (b===null)  需要改写.equals(other:Any?)

        a in b b.contains(a)   a !in b !b.contains(a)

        a[i] a.get(i)
        a[i, j] a.get(i, j)
        a[i_1, ..., i_n] a.get(i_1, ..., i_n)
        a[i]=b a.set(i, b)
        a[i,j]=b a.set(i, j, b)
        a[i_1,...,i_n]=b a.set(i_1,...,i_n, b)

        a(i_1,...,i_n) a.invoke(i_1,...,i_n)

    6.创建对象
        var object = MyClass()
五、继承
    1.构造
        一个类要被继承，显示指明它允许被继承，在基类前加open关键字
            open class Base{ }
        类似的，要继承基类的成员、方法，在相应的成员方法前加open关键字
        指定派生类从基类继承而来，需要在派生类的声明头部后用冒号:加基类名
        如果基类有主要构造函数，必须在基类名后这个基类的主要构造函数
            class Derived: Base() {}
        如果基类没有主要构造函数，需要在派生类的每个次要构造函数中使用super(参数)来调用基类的次要构造函数
            class MyView : View
            {
                constructor(ctx: Content) : super(ctx)
                constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)
            }
    2.重写
        重写方法
            基类要被重写的成员方法需要显式加上open关键字
            派生类中所重写的成员方法需要显式加上override关键字
                class Base
                {
                    open fun doThing()
                    {
                        //...
                    }
                }
                class Derived : Base()
                {
                    override fun doThing()
                    {
                        //...
                    }
                }
        重写属性
            可以在派生类中重写基类的属性，类似的，也需要使用相应的open和override关键字
                open class Shape {
                    open val vertexCount: Int = 0
                }

                class Rectangle : Shape() {
                    override val vertexCount = 4
                }
            派生类中可以用var重写基类的val属性，反之不成立，即派生类中不能用val重写基类的var属性
        3.调用基类方法
            派生类可以使用super关键字调用基类的方法
            如果一个派生类继承了一个基类和一个或多个接口类，而且他们包含了同名函数需要调用时，用super<类名>来区分是哪一个同名函数
                open class Rectangle
                {
                    open fun draw() {...}
                }
                interface Polygon
                {
                    fun draw() {...}
                }
                class Square() : Rectangle(), Polygon
                {
                    override fun draw()
                    {
                        super<Rectangle>.draw()
                        super<Polygon>.draw()
                    }
                }
            派生类中的嵌套类可以使用super@<OuterClassName>来调用外层类的基类的方法
泛型

六、stdlib
    stdlib中的容器分为可修改容器和不可修改容器，继承层次
                                                    MutableList
                                                    /
                MutableIterable -- MutableCollection
                /                                   \
        Iterable                                    MutableSet
                \ 
                Collection
                /       \
                List    Set
    通用：
        创建容器
            listOf()
            meptyList<T>()
            mutableListOf()
            setOf()
            emptySet<T>()
            mutableSetOf()
            mapOf()
            mutableMapOf()
                Map的构造函数需要使用键值对Pair类型来构造，构造一个Pair使用<key> to <value>的语法
                val numbersMap = MapOf("key1" to 1, "key2" to 2, "key3" to 3)
            
    Set
        判重过程：
            1.比较hash code，如果没有找到相同hash code的引用，则没有重复
            2.当找到相同hash code的引用时，使用===运算符来比较两个引用是否指向相同对象，如果===返回相同，则是重复，如果===返回不相同，则使用操作符==来比较两个引用所指向的对象是否“等同”
        所以Set中的两个引用相同的条件是：
            两个引用指向同一对象（所以此时hash code相同，===返回相同）
            hash code相同的不同一个对象（所以===返回不同），但是==返回相同
        
七、Lambda表达式
    1.形式
        Lambda表达式由一对花括号{}括起来，花括号中首先声明形参和其类型，然后用一个指向符号->加上函数体构成
            {x:Int -> x+5}  //一个将形参+5的lambda表达式
        如果lambda表达式没有形参，可以省略->符号
            {"Hello world!"}    //一个返回字符串"Hello world!"的lambda表达式
        lambda表达式可以赋值给一个对象
            val myLambda={x:Int -> x+5}

    2.调用lambda表达式
        调用一个lambda表达式，使用其invoke()方法，并加上实参
            myLambda.invokle(2)
        也可以直接对lambda表达式对象使用函数调用的形式
            myLambda(2)
    3.类型
        一个lambda表达式的类型是：(parameterType) -> returnType
        所以上面的myLambda的完整声明是：val myLambda:(Int) -> Int = {x:Int -> x+5}
        如果lambda表达式只有一个形参，可以省略形参名，并在函数体中用it指代这个形参
            val myLambda:(Int) -> Int = { it+5 }    //注意这里myLambda的类型不能省略，因为省略了之后编译器无法知道形参的类型
        如果一个lambda表达式没有返回值，或者不需要其返回值时，将returnType声明为Unit
    4.lambda表达式参数后置
        当传递一个lambda表达式作为函数形参时，最好将lambda表达式移出函数调用的圆括号()外
            fun calculate(x: Int, y: Int, operation: (Int, Int) -> Int): Int 
            {  
                return operation(x, y)                                          
            }
            val r = calculate(4, 5, {a, b -> a * b}) //不建议
            val r = calculate(4, 5) {a, b -> a * b}
        当一个函数只有lamba表达式作参数时，可以省略函数调用的圆括号()
            fun doThing(thing: () -> Unit)
            {
                a()
            }
            doThing {println("Doing things")}
八、异常
    所有的异常类都继承自Throwable
    异常机制由try catch finally语句构成
        try {
            //some code
        }
        catch(e: ExceptionType) {
            //exception handler
        }...
        finally {
            //optional finally block
        }
    可以有0或多个catch块，可选的finally块在try块抛出异常或时会最后执行
    至少要有一个catch或finally块
    try也可以作为一个表达式使用，表达式的返回值是try块或catch块（如果有的话）的最后一个语句，finally块不影响返回值
    throw也可以作为一个表达式使用，throw的返回值类型为Nothing，可以用在三目运算符中
        val s = person.name ?: throw IllegalArgumentException("Name required")
        fun willFail(message: String) : Nothing
        {
            throw ...
        }
    
