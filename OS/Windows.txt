0.MSVC C++扩展
    __interface
        定义一个__interface如同定义一个只包含纯虚函数的抽象基类
        需要满足以下条件：
            不从一个基类继承
            只能包含public的纯虚函数
            不能包含构造函数、析构函数、运算符函数
            不能包含静态方法
            不能包含成员变量，但是可以包含属性
        __interface中的纯虚函数可以简写省略virtual和=0
            __interface Animal
            {
                virtual void MakeSound() = 0; //可以直接写成void MakeSound();
            }
    __declspec()
        与static和extern类似，是一个存储类说明符
        https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-160
        括号中可以填入
            align(<number>)
            allocate("<segname>")
            allocator
            appdomain
            code_seg("<segname>")
            deprecated
            dllimport
            dllexport
            jitintrinsic
            naked
            noalias
            noinline
            noreturn
            nothrow
            novatable
            no_sanitize_address
            process
            property({get=<get_func_name> |, put=<put_func_name>})
            restrict
            safebuffers
            selectanu
            spectre(nomitigation)
            thread
            uuid("<ComObjectGUID>")
    UNREFERENCED_PARAMETETER(parameter)
        定义在<winnt.h>中，用来消除函数未使用参数时编译器警告
    调用约定
        __cdecl 
        __clrcall
        __stdcall
        __fastcall
        __thiscall
        __vectorcall
        在需要指定调用约定的函数声明的返回类型后加上面关键字之一，而函数定义不加，例如
            /*MyFunc.h*/
            void __cdecl MyFunc(int a, int b);

            /*MyFunc.cpp*/
            void MyFunc(int a, int b)
            {
                //...
            }
    
1.高级数据类型
    为了统一成大写，VC++给很多类型取了大写的typedef
    INT->int
    UINT->unsigned int
    CHAR->char
    WCHAR->wchar_t
    
    WinDef.h:
    BYTE 8位无符号
    DWORD 32位无符号
    INT32
    INT64
    LONG 32位有符号
    LONGLONG 64位有符号

    UINT32
    UINT64
    ULONG
    ULONGLONG
    WORD 16位无符号
    windows里P开头表示是指针，LP开头表示长指针（为了便于将给16位计算机设计的代码移植到32位），现在P和LP没有区别，与变量类型*的指针表示也没有区别
    指针的长度是编译时决定的，所以64位系统中运行32位的程序，指针长度仍然是32位

    BOOL {FALSE->0, TRUE->1}

    LRESULT->long (winnt.h:typedef long LONG    windef.h:typedef LONG LRESULT)
    HRESULT->long (winnt.h)初始化COM库的函数的返回值
    LPTSTR 字符串指针
    LPTCSTR 常量字符串指针
2.错误处理
    DWORD FormatMessage(
        DWORD dwFlags,
        LPCVOID pSource,
        DWORD dwMessageID,
        DWORD dwLanguageID,
        PTSTR pszBuffer,
        DWORD nSize,
        va_list* Arguments
    );

    VOID SetLastError(DWORD dwErrCode) 设置Error值
3.字符串
    在<winnt.h>中定义了这些宏

        #ifdef  UNICODE                     // r_winnt

        #ifndef _TCHAR_DEFINED
        typedef WCHAR TCHAR, *PTCHAR;
        typedef WCHAR TBYTE , *PTBYTE ;
        #define _TCHAR_DEFINED
        #endif /* !_TCHAR_DEFINED */

        typedef LPWCH LPTCH, PTCH;
        typedef LPCWCH LPCTCH, PCTCH;
        typedef LPWSTR PTSTR, LPTSTR;
        typedef LPCWSTR PCTSTR, LPCTSTR;
        typedef LPUWSTR PUTSTR, LPUTSTR;
        typedef LPCUWSTR PCUTSTR, LPCUTSTR;
        typedef LPWSTR LP;
        typedef PZZWSTR PZZTSTR;
        typedef PCZZWSTR PCZZTSTR;
        typedef PUZZWSTR PUZZTSTR;
        typedef PCUZZWSTR PCUZZTSTR;
        typedef PZPWSTR PZPTSTR;
        typedef PNZWCH PNZTCH;
        typedef PCNZWCH PCNZTCH;
        typedef PUNZWCH PUNZTCH;
        typedef PCUNZWCH PCUNZTCH;
        #define __TEXT(quote) L##quote      // r_winnt

        #else   /* UNICODE */               // r_winnt

        #ifndef _TCHAR_DEFINED
        typedef char TCHAR, *PTCHAR;
        typedef unsigned char TBYTE , *PTBYTE ;
        #define _TCHAR_DEFINED
        #endif /* !_TCHAR_DEFINED */

        typedef LPCH LPTCH, PTCH;
        typedef LPCCH LPCTCH, PCTCH;
        typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
        typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
        typedef PZZSTR PZZTSTR, PUZZTSTR;
        typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
        typedef PZPSTR PZPTSTR;
        typedef PNZCH PNZTCH, PUNZTCH;
        typedef PCNZCH PCNZTCH, PCUNZTCH;
        #define __TEXT(quote) quote         // r_winnt

        #endif /* UNICODE */                // r_winnt
        #define TEXT(quote) __TEXT(quote)   // r_winnt
    可以使用TEXT()宏，使得当UNICODE被定义时，使用16bit字符和字符串，否则使用8位字符和字符串
        TCHAR c = TEXT('A');
        TCHAR szBuffer[] = TEXT("A string");
    在<string.h>中也定义了类似的宏，使得无论是ANSI字符串函数还是Unicode字符串函数都能通过编译
        #ifdef _UNICODE
            #define _tcslen wcslen
        #else
            #define _tcslen strlen
        #endif
    在<strsafe.h>中定义了字符串函数的安全版本
    安全版本的函数在检查参数失败后会设置errno

    int CompareString(
        LCID locale,
        DWORD dwCmdFlags,
        PCTSTR pString1,
        int cch1
        PCTSTR pString2,
        int cch2)
        按语言习惯的方式进行字符串比较
        locale指定一个区域设置id，用来表示1种语言，通常使用GetThreadLocale()函数获取
        dwCmdFlags指定比较字符串的方法，可能的值为
            NORM_IGNORECASE LINGUISTIC_IGNORECASE 忽略大小写
        cch1和cch2指定字符数（不是字节数），传入负值则自动计算字符串长度
        pString为待比较字符串指针

    int CompareStringOrdinal(
        PCWSTR pString1,
        int cchCount1,
        PCWSTR pString2,
        int cchCount2,
        BOOL bIgnoreCase)
        按码位比较字符串，不考虑区域语言，适用于程序内部比较字符串
        返回
            0 ->函数失败
            CSTR_LESS_THAN 1 -> pString1 < pString2
            CSTR_EQUAL 2 -> pString1 == pString2
            CSTR_GREATER_THAN 3 -> pString2 > pString2
    使用这个宏来分配字符串所需的内存
        #define chmalloc(nCharacters) (TCHAR*)malloc(nCharacters * sizeof(TCHAR))
    UNICODE <=> ANSI
        int MultiByteToWideChar(
            UINT uCodePage,
            DWORD dwFlags,
            PCSTR pMultiByteStr,
            int cbMultiByte,
            PWSTR pWideCharStr,
            int cchWideChar
        )

        BOOL IsTextUnicode(
            CONST PVOID pvBuffer,
            int cb,         字节数
            PINT pResult    通常为NULL
        )
        判断一个字符串是包含ANSI字符还是Unicode字符

4.内核对象
    内核对象可以用一个安全描述符来保护
    用于创建内核对象的所有函数几乎都有一个只想SECURITY_ATTRIBUTES结构体的指针
    大多数创建内核对象的函数失败时返回值为NULL（0），少数的函数失败时返回INVALID_HANDLE_VALUE （-1）
    typedef struct _SECURITY_ATTRIBUTES {
        DWORD nLength;                  传入sizeof(SECURITY_ATTRIBUTES)
        LPVOID lpSecurityDescriptor;    
        BOOL bInheritHandle;        
    } SECURITY_ATTRIBUTES;

    HANDLE CreateFileMapping(
        HANDLE hFile,               
        PSECURITY_ATTRIBUTES psa,   
        DWORD flProtect,            
        DWORD dwMaximumSizeHigh,
        DWORD dwMaximumSizeLow,
        PCTSTR pszName
    )

    HANDLE CreateThread(
        PSECURITY_ATTRIBUTES psa,
        size_t dwStackSize,
        LPTHREAD_START_ROUTINE pfnStartAddress,
        PVOID pvParam,
        DWORD dwCreationFlags,
        PDWORD pdwThreadID
    )

    HANDLE CreateFile(
        PCTSTR pszFileName,
        DWORD dwSesiredAccess,
        DWORD dwShareMode,
        PSECURITY_ATTRIBUTES psa,
        DWORD dwCreationDisposition,
        DWORD dwFlagsAndAttribues,
        HANDLE hTemplateFile
    )

    HANDLE CreateSemaphore(
        PSECURITY_ATTRIBUTES psa,
        LONG lInitialCount,
        LONG lMaximumCount,
        PCTSTR pszName
    )

    无论用什么方式创建内核对象，都应该调用这个函数表明结束使用
    BOOL CloseHandle(Handle hobject)
    内核对象的共享
        对象句柄继承
            当进程之间存在父-子关系时可以使用对象句柄继承
            父进程需要初始化一个SECURITY_ATTRIBUTES结构，并设置其中的成员
                SECURITY_ATTRIBUTES sa{sizeof(sa), NULL, TRUE};
            再将其传给相应的创建内核对象的函数，例如
                HANDLE hMutex = CreateMutex(&sa, FALSE, NULL);
            有时可能父进程创建了两个子进程，并且希望只有其中一个子进程继承句柄，即需要在更改继承标志位后才能创建另一个进程
            更改进程标志位函数
                BOOL SetHandleInformation(
                    HANDLE hObject,     一个需要修改继承标志位的句柄
                    DWORD dwMask,       修改哪个进程标志位
                    DWORD dwFlags       修改为什么
                )
            所以需要调用
                SetHandleInformation(handle, HANDLE_FLAG_INHERIT, HANDLE_FLAG_INHERIT) 启用handle的继承
                SetHandleInformation(handle, HANDLE_FLAG_INHERIT, 0)    禁用handle的继承
5.进程
    Windows应用程序必须要有一个入口点函数
        当链接可执行文件时，连接器将按子系统开关来寻找入口点函数，如果找不到将返回unresolved external symbol
        /SUBSYSTEM:WINDOWS -> int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow) wWinMainCRTStartup
        /SUBSYSTEM:CONSOLE -> int _tmain(int argc, TCHAR* argv[], TCHAR* envp[]); wmainCRTStartup
        /NotSet -> 编译期自动查找入口点函数，并选择正确的启动函数
    hPrevInstance已经废弃不用
    加载到进程地址空间的每个dll或exe都有一个独一无二的实例句柄HINSTANCE
    有些函数需要一个HMODULE类型参数，HMODULE与HINSTANCE是完全混用的，因为在<minwindef.h>中有
        typedef HINSTANCE HMODULE; 
    进程的创建
        typedef struct _STARTUPINFO
        {
            DWORD cb;           //sizeof(STARTUPINFO)
            PSTR lpReserved;    //NULL
            PSTR lpDesktop;     //表明在哪个桌面上启动，如果不存在则新创建一个桌面，如果为NULL则在当前桌面启动
            PSTR lpTitle;       //控制台窗口的标题，如果为NULL则使用当前程序的名称
            DWORD dwX;          //如果是CUI程序，则指定控制台左上角的坐标，如果是GUI程序且在进程新建重叠窗口时使用了CW_USEDEFAULT参数，则指定新重叠窗口左上角的坐标
            DWORD dwY;
            DWORD dwXSize;
            DWORD dwYSize;
            DWORD dwXCountChars;//指定用字符数来表示的控制台的宽度和高度
            DWORD dwYCountChars;
            DWROD dwFillAttribute;//指定控制台窗口的文本和背景色
            DWORD dwFlags;
            WORD wShowWindow;
            WORD cbReserved2; //0
            PBYTE lpReserved2;//NULL
            HANDLE hStdInput;
            HANDLE hStdOutput;
            HANDLE hStdError;
        } STARTUPINFO, *LPSTARTUPINFO;
            dwFlagg的值：
                STARTF_USESIZE          使用dwXSize和dwYSize成员
                STARTF_USESHOWWINDOW    使用wShowWindow成员
                STARTF_USEPOSITION      使用dwX dwY
                STARTF_USECOUNTCHARS    使用dwXCountChars dwYCountChars
                STARTF_USEFILLATTRIBUTE 使用dwFillAttribute
                STARTF_USESTDHANDLES    使用hStdInput hStdOutput hStdError
                STARTF_RUNFULLSCREEN    控制台程序以全屏模式启动

        typedef struct _STARTUPINFOEX
        {
            STARTUPINFO StartupInfo;
            struct _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
        } STARTUPINFOEX, *LPSTARTUPINFOEX;

        typedef struct _PROCESS_INFORMATION
        {
            HANDLE hProcess;
            HANDLE hThread;
            DWORD dwProcessId;
            DWORD dwThreadId;
        } PROCESS_INFORMATION;

        BOOL CreateProcess(
            PCTSTR pszApplicationName,          //可执行文件名
            PTSTR pszCommandLine,               //注意这个字符串指针是非常量指针，意味着函数可能修改字符串中的内容，所以不能直接传入一个字符串字面值，但是函数返回时会复原
            PSECURITY_ATTRIBUTES psaProcess,    //进程内核对象的安全属性
            PSECURITY_ATTRIBUTES psaThread,     //线程内核对象的安全属性
            BOOL bInheritHandle,
            DWORD fdwCreate,
            PVOID pvEnvironment,
            PCTSTR pszCurDir,
            PSTARTUPINFO psiStartInfo,          //可以是一个STARTUPINFO的指针，也可以是STARTUPINFOEX的指针（都让fdwCreate使用了EXTENDED_STARTUPINFO_PRESENT时）
            PROCESS_INFORMATION ppiProcInfo
        )
        fdwCreate参数可以由下面的值按位或：
            DEBUG_PROCESS
            DEBUG_ONLY_THIS_PROCESS
            CREATE_SUSPENDED 系统在创建新进程时挂起其主线程，使得父进程可以修改子进程地址空间的内存、更改优先级等操作，结束后需要调用下面函数恢复子进程的执行
                DWORD ResumeThread(HANDLE hThread)
            DETACH_PROCESS 阻止CUI子进程使用父进程的控制台窗口，例如在控制台执行命令时输出是直接输出到控制台的，新进程如果需要控制台窗口，需要使用AllocConsole()函数
            CREATE_NEW_CONSOLE 不能与DETACH_PROCESS连用
            CREATE_NO_WINDOW 不要创建任何窗口（包括控制台）
            CREATE_DEFAULT_ERROR_MODE 不继承父进程的错误模式
            CREATE_UNICODE_ENVIRONMENT 子进程的环境快使用Unicode字符（默认是ANSI字符）
            EXTENDED_STARTUPINFO_PRESENT 表明psiStartInfo是一个指向STARTUPINFOEX结构体的指针
            还可以在fdwCreate参数设置优先级
                IDLE_PRIORITY_CLASS
                BELOW_NORMAL_PRIORITY_CLASS
                NORMAL_PRIORITY_CLASS
                ABOVE_NORMAL_PRIORITY_CLASS
                HIGH_PRIORITY_CLASS
                REALTIME_PRIORITY_CLASS
        pvEnvironment指向新进程所使用的环境字符串，多数情况下传入NULL，使得子进程继承父进程的环境字符串，可以在创建进程时使用函数
            PVOID GetEnvironmentStrings()
        pszCurDir为子进程的工作目录，如果为NULL则工作目录为程序所在的当前目录
    进程id
        GetCurrentProcessId()
        GetCurrentThreadId()
        GetProcessId()
        GetThreadId()
        GetProcessIdByThread()
    进程的退出
        进程的退出的4种方式
            主线程的入口点函数返回
            进程的一个线程调用ExitProcess()
                VOID ExitProcess(UINT fuExitCode)
                实际上，主线程的入口点函数返回时就是返回到C运行库的启动代码，清理资源后显示调用ExitProcess()，并将入口点函数的返回值作为fuExitCode参数的
            另一个进程种的线程调用TerminateProcess()
                BOOL TerminateProcess(HANDLE hProcess, UINT fuExitCode)
                    注意这个函数是非阻塞的，会立即返回
            进程中的所有线程都自然死亡
        获取进程的退出代码
            BOOL GetExitCodeProcess(HANDLE hProcess, PDWORD pdwExitCode)
            当hProcess所标识的进程还在运行时，会向pdwExitCode指向的变量写入STILL_ACTIVE
            
    进程的权限
        在某些程序的manifest文件中会有这样的字段
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
                <security>
                    <requestPrivileges>
                        <requestedExecutionLevel level="requireAdministrator"/>
                    </requestPrivileges>
                </security>
            </trustInfo>
            level有3个值：requireAdministrator highestAvailable asInvoker
            OpenProcessToken(HANDLE hHandle, token, PHANDLE pHandle)
            GetTokenInformation()
                TokenElevationTypeDefault
                TokenElevationTypeFull
                TokenElevationTypeLimited
                
    获取一个exe或dll的句柄
        使用函数
            HMODULE GetModuleHandle(PCTSTR pszModule)
                pszModule参数为一个可执行文件或dll的文件的名称，可以为NULL，此时系统返回主调进程的可执行文件的句柄
        使用函数
            BOOL GetModuleHandleEx(
                DWORD dwFlags,          //使用GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
                LPCSTR lpModuleName,    //使用当前函数的地址
                HMODULE* phModule       //指向存储HMODULE变量的指针
            )
        使用链接器定义的伪变量__ImageBase，对其进行取地址
            extern "C" const IMAGE_DOS_HEADER __ImageBase;
        
        HMODULE hModule = GetModuleHandle(nullptr);
        _tprintf(TEXT("With GetModuleHandle(nullptr) = 0x%x\n"), hModule);
        _tprintf(TEXT("With __ImageBase = 0x%x\n"),__ImageBase);
        输出：
            With GetModuleHandle(nullptr) = 0xd3920000
            With __ImageBase = 0xd3920000
    命令行
        程序运行时会忽略可执行文件名称，把剩下的命令行参数传递给pCmdLine参数
        要获取包括可执行文件名称的命令行参数，使用函数
            LPWSTR GetCommandLine()
        可以将命令行参数拆分成一个字符串数组
            PWSTR* CommandLineToArgvW(PWSTR pszCmdLine, int* pNumArgs)
            pNumArgs存储字符串数组的大小
    环境变量
        在GUI程序中
            函数GetEnvironmentStrings()会将所有环境变量放到一个字符串中，以\n分割
        在CUI程序中可以直接使用main函数的TCHAR* env[]参数，数组的最后一个指针是NULL
            该字符串数组的每个字符串都是以"<varName>=<value>"的格式
        DWORD GetEnvironmentVariable(
            PCTSTR pszName, //变量名
            PTSTR pszValue, //存储变量值的缓冲区的指针
            DWORD cchValue  //存储变量值缓冲区大小的字符数，当为0时函数返回所需缓冲区的字符数，所以要乘以一个sizeof(TCHAR)
        )
        经常使用环境变量的一个场景是带有环境变量的字符串，例如路径%USERPROFILE%\Document，可以使用下面的函数来将一个字符串中的环境变量展开
            DWORD ExpandEnvironmentStrings(
                PTCSTR pszSrc,  //包含可替换环境变量的字符串
                PTSTR pszDst,   //接受替换后字符串的缓冲区
                DWORD chSize    //缓冲区大小，当为0时函数返回缓冲区需要的字符数，所以要乘以一个sizeof
            )
        使用下面函数来添加、删除、修改一个环境变量
            BOOL SetEnvironmentVariable(
                PCTSTR pszName,
                PCTSTR pszValue
            )
            将pszName所表示的一个变量设为pszValue参数的值，如果pszValue为NULL则删除
    进程的错误模式
        每个进程都关联了一组标志，这些标志的作用是让系统知道进程如何响应严重错误，包括磁盘介质错误、未处理的异常、文件查找错误、数据对齐错误
        子进程会继承父进程的错误模式标记
            UINT SetErrorMode(UINT fuErrorMode) 告诉系统如何处理错误
                fuErrorMode是下面参数按位或的结果
                    SEM_FAILCRITICALERRORS
                    SEM_NOGPFAULTERRORBOX
                    SEM_NOOPENFILEERRORBOX
                    SEM_NOALIGNMENTFAULTEXCEPT
    进程目录
        windows为进程记录当前目录，如果程序中不使用完整路径，windows会在当前目录查找，例如CreateFile()函数
            DWORD GetCurrentDirectory(
                DWORD cchCurDir,    //当缓冲区不够大时，函数返回需要的字符数且不会写入缓冲区，由于有260的MAX_PATH限制，所以可以直接传入一个260字符的数组
                PTSTR pszCurDir 
            )
            BOOL SetCurrentDirectory(PCTSTR pszCurDir) 设置当前目录
        进程可以在不同驱动器下各有一个当前目录
    为GUI程序创建终端以方便调试
        if (!AllocConsole()) {
            // Add some error handling here.
            // You can call GetLastError() to get more info about the error.
            return -1;
        }
        // std::cout, std::clog, std::cerr, std::cin
        FILE* fDummy;
        freopen_s(&fDummy, "CONOUT$", "w", stdout);
        freopen_s(&fDummy, "CONOUT$", "w", stderr);
        freopen_s(&fDummy, "CONIN$", "r", stdin);
        std::cout.clear();
        std::clog.clear();
        std::cerr.clear();
        std::cin.clear();

        // std::wcout, std::wclog, std::wcerr, std::wcin
        HANDLE hConOut = CreateFile(_T("CONOUT$"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        HANDLE hConIn = CreateFile(_T("CONIN$"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        SetStdHandle(STD_OUTPUT_HANDLE, hConOut);
        SetStdHandle(STD_ERROR_HANDLE, hConOut);
        SetStdHandle(STD_INPUT_HANDLE, hConIn);
        std::wcout.clear();
        std::wclog.clear();
        std::wcerr.clear();
        std::wcin.clear();
    Windows版本
        typedef struct
        {
            DWORD dwOSVersionInfoSize;  //设置为sizeof(OSVERSIONINFOEX)
            DWORD dwMajorVersion;
            DWORD dwMinorVersion;
            DWORD dwBuildNumber;
            DWORD dwPlatformId;         //VER_PLATFORM_WIN32s(Win32s), VER_PLATFORM_WIN32_WINDOWS(Windows95/98), VERSION_PLATFORM_WIN32_NT(NT/2000/XP/2003/Vista)
            TCHAR szCSDVersionm[128];   //与操作系统有关的额外信息
            WORD wServicePackMajor;
            WORD wServicePackMinor;
            WORD wSuiteMask;
            BYTE wProductType;
            BYTE wReserved;
        } OSVERSIONINFOEX, *POSVERSIONINFOEX;

        BOOL GetVersionEx(POSVERSIONINFOEX pVersionInformation)


COM
    每个使用COM库的线程（注意是线程）都必须分别调用一次初始化函数
        HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
            pvReserved必须设置为NULL
            dwCoInit必须为以下值：
                COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE 表明该线程必须不与其他线程共享同一个COM指针，且包含一个message loop
                COINIT_MULTITHREADED | COINIT_DISABLE_OLE1DDE 不满足上面条件之一时使用这个参数
    每个使用COM库的线程在退出前都必须调用一次释放COM库的函数
        void CoUninitialize()
    大多数COM函数返回一个HRESULT类型的值，该类型实际上是一个32为整数，其最高位为0时表示成功，为1时表示错误，即
        0x0 - 0x7FFFFFFF 为成功结果
        0x80000000 - 0xFFFFFFFF 为错误结果
    所以为了判断是否成功，可以使用最高位与1<<15按位与，或者直接判断其是否大于0，因为负数的最高位就是1
    windows还提供了SUCCEEDED()和FAILED()宏，可以直接将结果作为布尔值
    使用一个GUID类型的结构体来标识COM借口或这COM类，GUID实际上是一个128位的整数
    习惯上，将COM接口以IID_I开头命名，COM类以CLSID_开头命名
        HRESULT CoCreateInstance(
            REFCLSID rclsid,        //类的GUID
            LPUNKNOWN pUnkOuter,    //取NULL
            DWORD dwClsContext,     
            REFIID riid,            //类所实现的COM接口的GUID
            LPVOID* ppv             //通常将需要赋值给的指针做reinterpret_cast<void**>(&pt)
        )
        第三参数的取值为：
            CLSCTX_INPROC_SERVER    Same process
            CLSCTX_LOCAL_SERVER     Different process, same computer
            CLSCTS_REMOTE_SERVER    Differnet computer
            CLSCTX_ALL              使用这个对象支持的最高效的选项
    注意，任何指向COM接口的指针，都必须在复制前调用AddRef()方法，在结束使用后调用Release()方法
    要查询一个COM接口指针所指向的COM对象是否实际上支持另一个接口，使用
        HRESULT QueryInterface(REFIID riid, void** ppvObject)
            riid为接口的GUID
            ppvObject为所要修改的指针，通常要reinterpret_cast<void**>(pt)
    有一些COM函数需要在内部分配内存，此时需要显式的调用CoTaskMemFree()函数释放内存，例如
        PWSTR pszFilePath;
        auto hr = pShellItem->GetDisplayName(SIGDN_FILESYSPATH, &pszFilePath); //这个函数会分配一个字符串的内存空间，并将指针pszFilePath设置为新分配的空间
        if(SUCCEEDED(hr))
        {
            //...
            CoTaskMemFree(pszFilePath);
        }
    由于要显式的对COM接口指针调用Release()方法十分繁琐，在<atlbase.h>中定义了一种智能指针类CComPtr<>
    这种智能指针类在析构时自动释放，在复制时自动调用AddRef()方法 
    CComPtr<T>定义了.CoCreateInstance()方法，只需传入__uuidof(COMClassName)即可创建一个指向COMClassName对象，且类型为T（某个接口类型）的指针

UI相关
    一个窗口实际上就是一个矩形区域，窗口接受用户的交互，并与其他窗口共享屏幕面积
    启动系统时，系统会创建一个桌面，桌面也是一个窗口，可以使用下面函数来获取桌面窗口的窗口句柄
        HWND GetDesktopWindow()
    一个窗口包含
        一个客户界面，客户界面是接收用户输入并渲染输出的区域，每一个产生窗口的GUI应用都必须定义一个window过程
        一个非客户界面，包括标题栏，菜单栏、最大化最小化关闭按钮、滚动条
    一个窗口的属性
        类名：每个窗口都属于一个窗口类，应用程序必须在创建窗口前注册一个窗口类，窗口类通常使用窗口过程定义窗口的行为
        窗口名：窗口名是标识一个窗口的字符串，通常显示在标题栏上，有些特殊窗口不显示窗口名，例如复选框列表
        窗口样式：是一些预定义的常量以WS_开头，定义了窗口除了窗口类之外的显示方法和行为，应用程序通常在创建窗口时就指定窗口样式，但也可以在创建之后再修改，使用SetWindowLong()函数
        拓展窗口样式：定义除了窗口类和窗口样式之外的窗口的显示和行为
        位置：窗口的位置是相对于屏幕左上角为原点坐标的位置，对于子窗口则是相对于父窗口客户界面的左上角为坐标
            WindowFromPoint()返回占据屏幕上某个点的窗口的窗口句柄
        大小：以宽高来定义，单位为像素，一个窗口的大小可以是0*0，此时系统将为其设置系统的最小窗口大小
            GetSystemMetrics()
            可以通过AdjustWindowRect()函数和期望的客户界面的大小来获取期望的整个窗口的大小作为CreateWindow()函数的参数
        父窗口或窗口句柄的所有者：当窗口有父窗口时行为会发生改变，例如可以使得子窗口只允许在父窗口的范围内移动。当一个窗口没有父窗口，或者父窗口是桌面窗口时，称为“最上层窗口”
            EnumWindows()
        菜单句柄或子窗口标识符:
        应用程序句柄：由于同一个程序可能运行多个实例，所以需要用不同的应用程序句柄来唯一标识
        创建窗口相关的数据
        窗口句柄
    可以通过CreateMutex()函数来创建一个系统范围的全局锁，当函数失败时即表明该程序有另一个实例正在运行，此时可以退出，来保证程序只能运行一个实例
    窗口类
        一个程序必须先注册一个窗口类
            下面结构体中只有打*的成员是必须填入的项
            typedef struct tagWNDCLASSEXW
            {
                UINT cbSize;
                UINT style;
                WNDPROC lpfnWndProc;    //*窗口过程函数的指针
                int cbClsExtra;         //这个窗口类所有窗口所需共享的额外的内存
                int cbWndExtra;         //这个窗口类所有窗口各自所需的额外的内存
                HINSTANCE hInstance;    //*
                HICON hIcon;
                HCURSOR hCursor;
                HBRUSH hbrBackground;   //定义窗口的客户区域的背景
                LPCWSTR lpszMenuName;
                LPCWSTR lpszClassName;  //*
                HICON hIconSm;
            } WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW; 
            
            ATOM RegisterClassEx(const WNDCLASSEXW* unnamedParam1)
                函数成功时返回一个标识这个窗口类的id，否则返回0
                
        一个窗口类具有一个窗口过程，而且可以创建多个窗口，这个窗口过程控制所有由这个窗口类创建的窗口
        有3种窗口类
            系统类
                系统类是由系统注册的窗口类，一部分系统类可以给用户程序使用
                    Button
                    ComboBox
                    Edit
                    ListBox
                    MDIClient
                    ScrollBar
                    Static
            
            程序全局类
                全局窗口类可以由一个exe或dll来注册，并被所有其他模块使用（即在所有其他模块创建这个窗口类的窗口）
            程序本地类
                只能由当前注册窗口类的exe或dll来创建这个窗口类的窗口
        当dll从内存中卸载时，系统不会自动删除其注册的窗口类，所以需要手动取消注册，否则会导致访问出错
            BOOL UnregisterClass(LPCWSTR lpClassName, HINSTANCE hInstance)
                函数失败时返回0
    窗口过程
        一个窗口过程函数具有4个参数：窗口句柄、UINT类型的信息标识符、WPARAM和LPARAM类型的两个信息的数据，函数返回一个有符号整数，整数的值根据特定的信息应具有特定意义
        有一个默认提供的窗口过程函数DefWindowProc()，它提供了所有窗口过程都必须具备的一些代码，直接将窗口过程函数的参数传给这个函数做剩下的处理
            LRESULT LRESULT DefWindowProc(
                HWND   hWnd,
                UINT   Msg,
                WPARAM wParam,
                LPARAM lParam
            );
        子类
            可以对窗口过程使用子类的方法来干预窗口过程，使得可以在子类窗口过程中修改预处理窗口信息，再调用原来的窗口过程
            有两种子类的构造方法
                实例子类：只对窗口类的某一个窗口实例的窗口过程子类化
                    需要使用下面的函数来修改这个窗口的窗口过程，并将nIndex设置为GWL_WNDPROC
                        LONG SetWindowLong(HWND hWnd, int nIndex, LONG dwNewLong)
                            nIndex的值可以是：
                                GWL_EXSTYLE
                                GWL_HINSTANCE
                                GWL_ID
                                GWL_STYLE
                                GWL_USERDATA
                                GWL_WNDPROC
                            函数成功时返回nIndex的值所对应的之前的值，例如返回之前的窗口过程函数指针
                    修改了窗口过程之后，如果需要调用原来的窗口过程函数做进一步处理，需要将上面函数的返回值保存，并使用下面函数调用原窗口过程
                        LRESULT CallWindowProc(
                            WNDProc lpPrevWndFunc,
                            HWND hWnd,
                            UINT Msg,
                            WPARAM wParam,
                            LPARAM lParam
                        )
                    有时也需要还原窗口过程，也需要用到SetWindowLong()函数返回的原窗口过程指针
                全局子类：对一个窗口类的所有窗口实例的窗口过程子类化
                    需要调用下面的函数来修改这个类的窗口过程，并将nIndex设置为GCL_WNDPROC
                        DWORD SetClassLong(HWND hWnd, int nIndex, LONG dwNewLong)
                            nIndex的值可以是
                                GCL_CBCLSEXTRA
                                GCL_CBWNDEXTRA
                                GCL_HBRBACKGROUND
                                GCL_HCURSOR
                                GCL_HICON
                                GCL_HICONSM
                                GCL_HMODULE
                                GCL_HMENUNAME
                                GCL_STYLE
                                GCL_WNDPROC
                            函数成功时返回nIndex的值所对应的之前的值
        超类
            可以在程序中对现有的窗口类进行功能拓展，成为超类
            超类拥有自己的窗口过程
            与子类化不同的是，超类在处理窗口创建消息（WM_NCCREATE WM_CREATE）时必须调用原本类的窗口过程函数
            先调用下面函数来获得窗口类的信息
                BOOL GetClassInfo(HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASS lpWndClass)
            然后修改lpWndClass中的lpszClassName成员为超类的类名，把hInstance成员设置为自己的句柄
            然后调用RegisterClass()函数来注册超类
            同时注意需要保存lpfnWndProc成员，以备后面还原
    窗口样式
        重叠窗口 WS_OVERLAPPED WS_OVERLAPPEDWINDOW
            通常用作程序的主窗口
        弹出窗口 
            通常用作临时窗口，例如对话框、消息框
            弹出窗口的标题栏是可选的
            WS_POPUP 
            WS_POPUPWINDOW 包含窗口边框和菜单栏
            WS_CAPTION | WS_POPUPWINDOW 包含标题栏、窗口边框和菜单栏
        子窗口 WS_CHILD
            子窗口不能创建菜单栏
        

    HWND CreateWindowEx(
        DWORD dwExStyle,
        LPCWSTR lpClassName,    //必须为之前调用过RegisterClass()注册过的窗口类的类名，否则ShowWindow()将无效
        LPCWSTR lpWindowName,   //窗口标题栏显式的字符串
        DWORD dwStyle,
        int X,                  //窗口左上角的水平位置，如果窗口是一个子窗口，则为相对于父窗口的水平位置，如果使用overlapped窗口样式，则可以使用CW_USEDEFAULT来自动分配位置
        int Y,                  //窗口左上角的垂直位置，如果X值使用CW_USEDEFAULT，则Y被忽略
        int nWidth,             //
        int nHeight,
        HWND hWndParent,
        HMENU hMenu,            //创建一个子窗口时需要一个有效的HWND窗口句柄
        HINSTANCE hInstance,    //
        LPVOID lpParam
    );
    CreateWindow()函数其实是CreateWindowEx()函数的简化版，使用了默认的dxExStyle
        #define CreateWindowW(lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)\
        CreateWindowExW(0L, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)
    创建窗口后，系统会在窗口实际显示出来之前发送下面两个信息给窗口过程函数
        创建完窗口的非客户界面后 -> WM_NCCREATE 
        创建完窗口的客户界面后 -> WM_CREATE

    BOOL ShowWindow(HWND hWnd, int nCmdShow)
        当用来显示应用程序的主窗口时，参数nCmdShow必须为SW_SHOWDEFAULT
        当第一次调用这个函数时，nCmdShow参数的值应该为WinMain函数的参数
        再次调用这个函数时，第二参数的值可以是
            SW_HIDE
            SW_SHOWNORMAL SW_NORMAL
            SW_SHOWMINIMIZED
            SW_SHOWMAXIMIZED SW_MAXIMIZE
            SW_SHOWNOACTIVE
            SW_SHOW
            SW_MINIMIZE
            SW_SHOWMINNOACTIVE
            SW_SHOWNA
            SW_RESTORE
            SW_SHOWDEFAULT
            SW_FORCEMINIMIZE
    
    BOOL IsWindow(HWND hWnd)
        函数返回hWnd所代表的窗口句柄是否是一个存在的窗口
        不要对非本线程创建的窗口调用这个函数来检测，因为窗口句柄的值可能被循环使用，即这个窗口句柄可能已经指向另一个窗口
    BOOL IsWindowVisible(HWND hWnd)
        函数返回hWnd所代表的窗口是否可见
    HWND GetWindow(HWND hWnd, UINT uCmd)

    
进程通信
    SendMessage方式
        typedef struct tagCOPYDATASTRUCT {
            ULONG_PTR dwData;   //发送数据的类型，用户自己定义
            DWORD cbData;       //发送数据的字节数
            PVOID lpData;       //发送数据的指针
        };

        LRESULT SendMessage(
            HWND hWnd,      //接收消息的窗口的句柄
            UINT Msg,       //
            WPARAM wParam,  
            LPARAM lpParam  //与wParam一样都是与具体消息类型有关的额外参数
        )

        发送程序
            #include <windows.h>

            int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int nCmdShow)
            {
                wchar_t str[] = L"Hello world";     //发送这个字符串

                auto receiveWindow = FindWindow(nullptr, L"Receiver");
                if (receiveWindow == nullptr)
                    return 1;

                COPYDATASTRUCT copyData{};
                copyData.lpData = str;
                copyData.cbData = sizeof(str);

                HWND hwnd = CreateWindowEx(
                    0,                              // Optional window styles.
                    L"Sender",                      // Window class
                    L"Sender Title",                // Window text
                    WS_OVERLAPPEDWINDOW,            // Window style

                    // Size and position
                    CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

                    NULL,       // Parent window    
                    NULL,       // Menu
                    hInstance,  // Instance handle
                    NULL        // Additional application data
                );  //产生一个隐藏的窗口，只用来发送信息，所以无需注册窗口类

                SendMessage(receiveWindow, WM_COPYDATA, (WPARAM)hwnd, (LPARAM)&copyData);
            }

        接收程序
            #include <windows.h>

            LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

            int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)
            {
                // Register the window class.
                const wchar_t CLASS_NAME[] = L"Sample Window Class";

                WNDCLASS wc = { };

                wc.lpfnWndProc = WindowProc;
                wc.hInstance = hInstance;
                wc.lpszClassName = CLASS_NAME;

                RegisterClass(&wc);

                // Create the window.

                HWND hwnd = CreateWindowEx(
                    0,                              // Optional window styles.
                    CLASS_NAME,                     // Window class
                    L"Receiver",                        // Window text
                    WS_OVERLAPPEDWINDOW,            // Window style

                    // Size and position
                    CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

                    NULL,       // Parent window    
                    NULL,       // Menu
                    hInstance,  // Instance handle
                    NULL        // Additional application data
                );

                if (hwnd == NULL)
                {
                    return 0;
                }

                ShowWindow(hwnd, nCmdShow);

                // Run the message loop.

                MSG msg = { };
                while (GetMessage(&msg, NULL, 0, 0))
                {
                    TranslateMessage(&msg);
                    DispatchMessage(&msg);
                }

                return 0;
            }

            LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
            {
                switch (uMsg)
                {
                case WM_DESTROY:
                    PostQuitMessage(0);
                    return 0;

                case WM_PAINT:
                {
                    PAINTSTRUCT ps;
                    HDC hdc = BeginPaint(hwnd, &ps);

                    FillRect(hdc, &ps.rcPaint, (HBRUSH)(COLOR_WINDOW + 1));

                    EndPaint(hwnd, &ps);
                    break;
                }
                case WM_COPYDATA:
                {
                    auto pData = reinterpret_cast<COPYDATASTRUCT*>(lParam);
                    MessageBox(nullptr, (LPCWSTR)pData->lpData, L"Get Message", MB_OK); //将接收到的字符串显示到一个消息框中
                    break;
                }
                return 0;

                }
                return DefWindowProc(hwnd, uMsg, wParam, lParam);
            }
    